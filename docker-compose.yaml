# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

services:
  spark-connect-proxy:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.proxy
    ports:
      - "8080:8080"  # Spark Connect Proxy port
      - "8081:8081"  # Control API port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/control/metrics"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - spark-network

  spark1:
    image: bitnami/spark:3.5.5
    ports:
      - "15002:15002"  # Spark Connect port
      - "4040:4040"    # Spark UI
    environment:
      - SPARK_NO_DAEMONIZE=1
      - SPARK_MODE=master
    volumes:
      - ./docker/spark-init.sh:/opt/spark-init.sh
    command: >
      bash -c "/opt/spark-init.sh 15002 4040"
    networks:
      - spark-network

  spark2:
    image: bitnami/spark:3.5.5
    ports:
      - "15003:15002"  # Spark Connect port (mapped to 15003 on host)
      - "4041:4041"    # Spark UI
    environment:
      - SPARK_NO_DAEMONIZE=1
      - SPARK_MODE=master
    volumes:
      - ./docker/spark-init.sh:/opt/spark-init.sh
    command: >
      bash -c "/opt/spark-init.sh 15002 4041"
    networks:
      - spark-network

  test:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.test
    depends_on:
      spark-connect-proxy:
        condition: service_healthy
      spark1:
        condition: service_started
      spark2:
        condition: service_started
    networks:
      - spark-network

networks:
  spark-network:
    driver: bridge