# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release Builds

on:
  release:
    types: [created, edited]

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        # Skip Windows ARM64 as Go doesn't fully support it yet for compilation
        exclude:
          - os: windows
            arch: arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'  # Specify a suitable Go version
          check-latest: true

      - name: Set release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          # Create output directory
          mkdir -p ./dist
          
          # Set file extension based on OS
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            EXT=".exe"
          else
            EXT=""
          fi
          
          # Set the output filename with version info
          OUTPUT="spark-connect-proxy-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}${EXT}"
          echo "Building ${OUTPUT}..."
          
          # Build the binary
          cd cmd/spark-connect-proxy
          go build -ldflags="-s -w" -o "../../dist/${OUTPUT}" .
          cd ../..
          
          # Create ZIP archive
          cd dist
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            zip "${OUTPUT%.exe}.zip" "${OUTPUT}"
            echo "ARCHIVE=${OUTPUT%.exe}.zip" >> $GITHUB_ENV
          else
            tar -czvf "${OUTPUT}.tar.gz" "${OUTPUT}"
            echo "ARCHIVE=${OUTPUT}.tar.gz" >> $GITHUB_ENV
          fi
          cd ..

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/${{ env.ARCHIVE }}
          asset_name: ${{ env.ARCHIVE }}
          asset_content_type: application/octet-stream

      - name: Upload release checksum
        run: |
          cd dist
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            sha256sum "${OUTPUT%.exe}.zip" > "${OUTPUT%.exe}.zip.sha256"
            echo "CHECKSUM=${OUTPUT%.exe}.zip.sha256" >> $GITHUB_ENV
          else
            sha256sum "${OUTPUT}.tar.gz" > "${OUTPUT}.tar.gz.sha256"
            echo "CHECKSUM=${OUTPUT}.tar.gz.sha256" >> $GITHUB_ENV
          fi
          cd ..

      - name: Upload checksum as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/${{ env.CHECKSUM }}
          asset_name: ${{ env.CHECKSUM }}
          asset_content_type: text/plain